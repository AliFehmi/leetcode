class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        ListNode * mergedList, *head=NULL;
        bool firstTime=true;
        while (list1!=NULL && list2!=NULL){
            
            if ( list1->val >= list2->val){
                if (firstTime){
                    
                    ListNode * newNode= new ListNode(list2->val);
                    mergedList= newNode;
                    head= mergedList;
                    firstTime=false;
                }
                else{
                    
                    ListNode * newNode= new ListNode(list2->val);
                    mergedList->next= newNode;
                    mergedList= mergedList->next;
                }
                list2= list2->next;
            }
            else if ( list2->val > list1->val){
                if (firstTime){
                    ListNode* newNode= new ListNode(list1->val);
                    mergedList= newNode;
                    head= mergedList;
                    firstTime=false;
                }
                else{
                    
                    ListNode * newNode= new ListNode(list1->val);
                    mergedList->next= newNode;
                    mergedList= mergedList->next;
                }
                list1= list1->next;
            }
            
        }
        
        if (list1==NULL){
            
            while (list2!=NULL){
                if (firstTime){
                    mergedList= new ListNode(list2->val);
                    head= mergedList;
                    firstTime=false;
                }
                else{
                    mergedList->next= new ListNode(list2->val);
                    mergedList= mergedList->next;
                }
                list2= list2->next;
            }
        }
        else if (list2==NULL){
          
            while (list1!=NULL){
                if (firstTime){
                    mergedList= new ListNode (list1->val);
                    firstTime=false;
                    head= mergedList;
                }
                else{
                    mergedList->next= new ListNode(list1->val);
                    mergedList= mergedList->next;
                }
                list1= list1->next;
            }
        }
        return head;
    }
};
